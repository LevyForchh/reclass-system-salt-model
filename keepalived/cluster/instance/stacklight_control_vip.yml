# This instance is needed for the case, where on control node the GlusterFS is deployed with keepalived and
# a `remote_agent` from `Stacklight` sends its queries to the control's VIP to gather the GlusterFS data.
# In case of `glusterd` process failure, the VIP should be moved to another node, to prevent `remote_agent` from failing.
# In addition, check for haproxy process too, as on its failure VIP should be also moved to another node.
classes:
- service.keepalived.support
parameters:
  _param:
    keepalived_stacklight_control_vip_address: ${_param:keepalived_vip_address}
    keepalived_stacklight_control_vip_password: ${_param:keepalived_vip_password}
    keepalived_stacklight_control_vip_interface: ${_param:keepalived_vip_interface}
    keepalived_stacklight_control_vip_priority: ${_param:keepalived_vip_priority}
    keepalived_stacklight_control_vip_virtual_router_id: ${_param:keepalived_vip_virtual_router_id}
    keepalived_stacklight_control_vip_vrrp_check_script_content: "pidof glusterd && pidof haproxy"
  keepalived:
    cluster:
      vrrp_scripts:
        vrrp_check:
          content: ${_param:keepalived_stacklight_control_vip_vrrp_check_script_content}
          interval: 10
          rise: 1
          fall: 1
      enabled: true
      instance:
        VIP:
          address: ${_param:keepalived_stacklight_control_vip_address}
          password: ${_param:keepalived_stacklight_control_vip_password}
          interface: ${_param:keepalived_stacklight_control_vip_interface}
          priority: ${_param:keepalived_stacklight_control_vip_priority}
          virtual_router_id: ${_param:keepalived_stacklight_control_vip_virtual_router_id}
          track_script: vrrp_check
